# Command Enhancements

# Utility
alias reload='source ~/bin/dotfiles/zsh/aliases'
alias ea='subl -w ~/bin/dotfiles/zsh/aliases && reload' # Edit aliases
alias ee="subl ~/bin/dotfiles/zsh/env"
alias ec="subl ~/bin/dotfiles/zsh/config"

# Quicker cd
alias cdf='cd ~/projects/furnish'
alias cdw='cd ~/projects/payroll'
alias cda='cd ~/projects/amidship/amidship'
alias cdm='cd ~/projects/mobilbid/mobilbid'

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias h='history'
function hisgrep() {
  grep -r "$@" ~/.history/* | grep "$@" | awk -F: {'print $2'}
}

alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
alias s='cd ..'   # up one dir

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias e='exit'
alias k9="killall -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
function zipr() {
  zip -r $1.zip $1
}

# Finder
alias o='open . &'
alias ff='open -a Firefox'

# General code

# From Chris Wanstrath
function pless() {
    pygmentize $1 | less -r
}

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Mercurial hg
function new-hg() {
    ssh hg@example.com "hg init $1"
    hg clone ssh://hg@example.com/$1
}

# Macports Mysql
alias my_stop="sudo launchctl stop org.macports.mysql5"
alias my_start="sudo launchctl start org.macports.mysql5"
alias my_rs="my_stop ; my_start"
alias myconf="subl /opt/local/etc/mysql5/my.cnf"
alias mysql5='mysql'
alias mysqladmin5='mysqladmin'

# Git
alias git='hub'
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gmm='git merge master'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gci='git commit -v -m'
alias gaa='git add .'
alias ga='git add'
# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='subl .git/config'
alias glg='git log --graph --pretty=format:"%an: %s - %Cred%h%Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset" --abbrev-commit --date=relative'
alias gslg='git shortlog -s -n'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}
# Git export
function gex() {
  git checkout-index -a --prefix=$1/
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# Quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}
# Git SVN
alias gsl='git spull'
alias gsp='git spush'

# Text editing
# Emacs
alias em="open -a Emacs"
alias emm="open -a Emacs ."
# Regenerate TAGS file from file arguments
function ct() {
  rm -f TAGS
  etags --append --output=TAGS $*
}

# Sublime
alias mp="subl actions bi bin Capfile Vagrantfile doc spec Gemfile* app features test Guardfile config lib Procfile *.ru *.md cookbooks public Rakefile db script"
alias mq="subl app config lib db schema public spec test vendor/gems vendor/plugins Rakefile Capfile Vladfile Todofile README stories merb slices tasks features &"

# Ruby
alias r="rake"
alias rt="rake test"
alias rtu="rake test:units"
alias rtf="rake test:functionals"
alias rdm="rake db:migrate"
alias rdr="rake db:rollback"

# Selenium
alias selenium="java -jar ~/bin/selenium-server-standalone-2.47.1.jar"

function markdown() {
/Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html
}

# Web
alias webs="python -m SimpleHTTPServer 9000"

# Rails
alias mr='mongrel_rails start'
alias ms='mongrel_rails stop'
alias rp='touch tmp/restart.txt'
alias sc='./script/console'
alias pc='be pry -r ./config/environment'
alias rc='be rails console'
alias rs='be rails server'
alias sg='./script/generate'
alias sgm='./script/generate migration'
alias sp='./script/plugin'
alias ss='./script/server'
alias r='./script/rails'
alias tl='tail -f log/*.log'
alias ts='thin start'

# Heroku
alias herokuc='heroku run rails console'

# Bundler
alias be='bundle exec'

# Vlad
alias vd='rake vlad:deploy'
alias vdb='rake vlad:deploy_beta'
alias vds='rake vlad:deploy_staging'
alias vc='rake vlad:clone'

# Vagrant
alias v='vagrant'

# TDD / BDD

alias aa='autotest'
alias aaf='autotest -f' # Don't run all at start
alias aas="./script/autospec"

# Setup a tunnel
function haproxyssh() {
  ssh -L7997:127.0.0.1:7997 deploy@$1.com
}

# Syntax check Javascript
function jsc() {
  jsl -conf /etc/jsl/jsl.conf -process $1
}

function aiff2mp3() {
  lame -h -V 0 $1.aif $1.mp3
}
function wav2mp3() {
  lame -h -V 0 $1.wav $1.mp3
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() {
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $*
}

alias ox="open *.xcodeproj"

# Nginx
function nginx_stop() {
    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}
function nginx_start() {
    sudo /opt/nginx/sbin/nginx
}

# TaskPaper
function new-tp() {
    touch $1.taskpaper
    open $1.taskpaper
}


# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

function wiki() {
    dig +short txt $1.wp.dg.cx
}

function rm-thumbs() {
  rm -rf demos/$1/img/thumbnails
  gco demos/$1/img/thumbnails
}

function cp-release() {
  cp release/pressly.js ../pressly-data/themes/$1/public/javascripts/pressly.js
  cp stylesheets/pressly.css ../pressly-data/themes/$1/public/styles/pressly.css
}

function cp-style() {
  cp themes/default/views/sass/partials/$1 themes/$2/views/sass/partials/
}

function cleanup-theme() {
  rm -rf demos/$1
  gco demos/$1/global
}

function filecount() {
  find . -mindepth 2 | awk -F/ {'print $2'} | uniq -c
}

hitch() {
command hitch "$@"
if [[ -s "$HOME/.hitch_export_authors" ]] ; then source "$HOME/.hitch_export_authors" ; fi
}
alias unhitch='hitch -u'
# Uncomment to persist pair info between terminal instances
# hitch